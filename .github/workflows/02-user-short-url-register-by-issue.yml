name: User short URL register by issue
  
on:
  issues:
    types: [opened, edited]
    
jobs:
  user-short-url-register:
    if: contains(github.event.issue.labels.*.name, 'user-short-url-register')
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout main branch
      uses: actions/checkout@v3
      with:
        ref: main
        
    - name: Set env
      id: env
      env:
        GITHUB_ID: ${{ github.event.issue.user.id }}
      run: |
        # Created at
        CREATED_AT=$(TZ=Asia/Seoul date +"%Y-%m-%dT%H:%M:%S%:z")
        
        # Env
        USERS_REGISTER_INFO_PATH="registered/users"
        USERS_PUBLIC_PATH="public/u"
        USERS_SERVICE_PATH="u"
        
        USER_REGISTER_INFO_FILE="$USERS_REGISTER_INFO_PATH/${GITHUB_ID}.json"
        USER_SHORT_URL_HTML_TEMPLATE_FILE="templates/user-short-url.html"
        USER_SHORT_URL_HTML_FILE_NAME="index.html"
        USER_META_INFO_FILE_NAME="user.json"
        USER_MENU_INFO_FILE_NAME="menu.json"
        CONTENT_META_INFO_FILE_NAME="content.json"
        LIST_GLOBAL_META_INFO_FILE_NAME="list.global.json"
        LIST_META_INFO_FILE_NAME="list.json"
        
        # Github output
        {
          # Created at
          echo "created_at=$CREATED_AT"
          
          # Env
          echo "users_register_info_path=$USERS_REGISTER_INFO_PATH"
          echo "users_public_path=$USERS_PUBLIC_PATH"
          echo "users_service_path=$USERS_SERVICE_PATH"
        
          echo "user_register_info_file=$USER_REGISTER_INFO_FILE"
          echo "user_short_url_html_template_file=$USER_SHORT_URL_HTML_TEMPLATE_FILE"
          echo "user_short_url_html_file_name=$USER_SHORT_URL_HTML_FILE_NAME"
          echo "user_meta_info_file_name=$USER_META_INFO_FILE_NAME"
          echo "user_menu_info_file_name=$USER_MENU_INFO_FILE_NAME"
          echo "content_meta_info_file_name=$CONTENT_META_INFO_FILE_NAME"
          echo "list_global_meta_info_file_name=$LIST_GLOBAL_META_INFO_FILE_NAME"
          echo "list_meta_info_file_name=$LIST_META_INFO_FILE_NAME"
        } >> "$GITHUB_OUTPUT"
        
    - name: Parse issue forms
      id: issue-parser
      uses: edumserrano/github-issue-forms-parser@v1.3.7
      with:
        template-filepath: '.github/ISSUE_TEMPLATE/02-user-short-url-register-by-issue.yml'
        issue-form-body: '${{ github.event.issue.body }}'
        
    - name: Extract the first user ID from registered user info
      uses: ./.github/actions/extract-the-first-user-id-from-registered-user-info
      id: registered-user-info
      with:
        user-register-info-file: ${{ steps.env.outputs.user_register_info_file }}
        
    - name: Extract user ID, original URL, short URL, etc. from issue body
      id: extract
      env:
        ENV__USERS_PUBLIC_PATH: ${{ steps.env.outputs.users_public_path }}
        ENV__USERS_SERVICE_PATH: ${{ steps.env.outputs.users_service_path }}
        ENV__USER_SHORT_URL_HTML_FILE_NAME: ${{ steps.env.outputs.user_short_url_html_file_name }}
        ENV__USER_META_INFO_FILE_NAME: ${{ steps.env.outputs.user_meta_info_file_name }}
        ENV__USER_MENU_INFO_FILE_NAME: ${{ steps.env.outputs.user_menu_info_file_name }}
        ENV__CONTENT_META_INFO_FILE_NAME: ${{ steps.env.outputs.content_meta_info_file_name }}
        ENV__LIST_GLOBAL_META_INFO_FILE_NAME: ${{ steps.env.outputs.list_global_meta_info_file_name }}
        ENV__LIST_META_INFO_FILE_NAME: ${{ steps.env.outputs.list_meta_info_file_name }}
        PARSED_ISSUE: ${{ steps.issue-parser.outputs.parsed-issue }}
        FIRST_USER_ID_IN_REGISTERED_USER_INFO: ${{ steps.registered-user-info.outputs.first-user-id-in-registered-user-info }}
        REPO_NAME: ${{ github.event.repository.name }}
        ISSUE_NUMBER: ${{ github.event.issue.number }}
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Extract
        USER_ID=$(echo "$PARSED_ISSUE" | jq -r '.["user-id"]')
        ORIGINAL_URL=$(echo "$PARSED_ISSUE" | jq -r '.["original-url"]')
        SHORT_PATH=$(echo "$PARSED_ISSUE" | jq -r '.["short-url"]')
        REDIRECT_DELAY=$(echo "$PARSED_ISSUE" | jq -r '.["redirect-delay"]')
        PAGE_TITLE=$(echo "$PARSED_ISSUE" | jq -r '.["page-title"]')
        ARTICLE_TITLE=$(echo "$PARSED_ISSUE" | jq -r '.["title"]')
        
        # Optionals
        if [ -z "$USER_ID" ]; then
          USER_ID="$FIRST_USER_ID_IN_REGISTERED_USER_INFO"
        fi
        
        if [ -z "$PAGE_TITLE" ]; then
          PAGE_TITLE="$USER_ID"
        fi
        
        if [ -z "$ARTICLE_TITLE" ]; then
          ARTICLE_TITLE="$REPO_NAME/$USER_SERVICE_SHORT_URL_PATH"
        fi
        
        # User paths & files
        USER_PUBLIC_PATH="$ENV__USERS_PUBLIC_PATH/$USER_ID"
        USER_PUBLIC_SHORT_URL_PATH="$USER_PUBLIC_PATH/$SHORT_PATH"
        USER_SERVICE_PATH="$ENV__USERS_SERVICE_PATH/$USER_ID"
        USER_SERVICE_SHORT_URL_PATH="$USER_SERVICE_PATH/$SHORT_PATH"
        
        USER_PUBLIC_META_INFO_FILE="$USER_PUBLIC_PATH/$ENV__USER_META_INFO_FILE_NAME"
        CONTENT_PUBLIC_META_INFO_FILE="$USER_PUBLIC_SHORT_URL_PATH/$ENV__CONTENT_META_INFO_FILE_NAME"
        LIST_PUBLIC_GLOBAL_META_INFO_FILE="$USER_PUBLIC_PATH/$ENV__LIST_GLOBAL_META_INFO_FILE_NAME"
        LIST_PUBLIC_META_INFO_FILE="$USER_PUBLIC_SHORT_URL_PATH/../$ENV__LIST_META_INFO_FILE_NAME"
        USER_PUBLIC_SHORT_URL_HTML_FILE="$USER_PUBLIC_SHORT_URL_PATH/$ENV__USER_SHORT_URL_HTML_FILE_NAME"
        USER_SERVICE_MENU_INFO_FILE="$USER_SERVICE_PATH/$ENV__USER_MENU_INFO_FILE_NAME"
        
        # SEO
        CANONICAL_PATH="$USER_SERVICE_SHORT_URL_PATH"
        
        # Validation: User ID
        if [[ ! "$USER_ID" =~ ^[a-z0-9][a-z0-9_-]{1,28}[a-z0-9]$ ]]; then
          echo "올바르지 않은 아이디 형식" > comment.md
          gh issue comment "$ISSUE_NUMBER" -F comment.md
          echo "user_id=" >> $GITHUB_OUTPUT
          exit 1
        fi
        
        # Validation: Original URL
        if [[ ! "$ORIGINAL_URL" =~ ^https?:// ]]; then
          echo "올바르지 않은 원본 URL 형식" > comment.md
          gh issue comment "$ISSUE_NUMBER" -F comment.md
          echo "original_url=" >> $GITHUB_OUTPUT
          exit 1
        fi
        
        # Validation: Short URL path
        validate_segment() {
          SEGMENT="$1"
          echo "SEGMENT: $SEGMENT"
          
          if [[ "$SEGMENT" =~ ^[a-zA-Z0-9](?:[a-zA-Z0-9_-]{0,18}[a-zA-Z0-9])?$ ]]; then
            return 1
          fi
          return 0
        }
        
        IFS='/' read -ra PARTS <<< "$SHORT_PATH"
        PATH_PREFIX="/$USER_SERVICE_PATH"
        BREADCRUMBS=()
        
        for i in "${!PARTS[@]}"; do
          SEGMENT="${PARTS[$i]}"
          
          if ! validate_segment "$SEGMENT"; then
            echo "올바르지 않은 단축 URL 경로 형식: $SEGMENT" > comment.md
            gh issue comment "$ISSUE_NUMBER" -F comment.md
            echo "short_path=" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          PATH_PREFIX="$PATH_PREFIX/$SEGMENT"
          BREADCRUMBS+=("${SEGMENT}|${PATH_PREFIX}")
        done
        
        # Breadcrumbs
        BREADCRUMBS_STR=$(IFS=','; echo "${BREADCRUMBS[*]}")
        echo "Extracted BREADCRUMBS_STR: $BREADCRUMBS_STR"
        
        # Validation: Redirect delay
        if ! [[ "$REDIRECT_DELAY" =~ ^[0-9]+$ ]]; then
          echo "올바르지 않은 지연 시간" > comment.md
          gh issue comment "$ISSUE_NUMBER" -F comment.md
          echo "redirect_delay=" >> $GITHUB_OUTPUT
          exit 1
        fi
        
        # Github output
        {
          echo "user_id=$USER_ID"
          echo "original_url=$ORIGINAL_URL"
          echo "short_path=$SHORT_PATH"
          echo "breadcrumbs_str=$BREADCRUMBS_STR"
          echo "redirect_delay=$REDIRECT_DELAY"
          echo "page_title=$PAGE_TITLE"
          echo "article_title=$ARTICLE_TITLE"
          
          echo "user_public_path=$USER_PUBLIC_PATH"
          echo "user_public_short_url_path=$USER_PUBLIC_SHORT_URL_PATH"
          echo "user_service_path=$USER_SERVICE_PATH"
          echo "user_service_short_url_path=$USER_SERVICE_SHORT_URL_PATH"
          
          echo "user_public_meta_info_file=$USER_PUBLIC_META_INFO_FILE"
          echo "content_public_meta_info_file=$CONTENT_PUBLIC_META_INFO_FILE"
          echo "list_public_global_meta_info_file=$LIST_PUBLIC_GLOBAL_META_INFO_FILE"
          echo "list_public_meta_info_file=$LIST_PUBLIC_META_INFO_FILE"
          echo "user_public_short_url_html_file=$USER_PUBLIC_SHORT_URL_HTML_FILE"
          echo "user_service_menu_info_file=$USER_SERVICE_MENU_INFO_FILE"
          
          echo "canonical_path=$CANONICAL_PATH"
        } >> "$GITHUB_OUTPUT"
        
    - name: Check if user exists
      env:
        ENV__USER_PUBLIC_PATH: ${{ steps.extract.outputs.user_public_path }}
        USER_ID: ${{ steps.extract.outputs.user_id }}
        ISSUE_NUMBER: ${{ github.event.issue.number }}
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Validation: User ID
        if [ ! -d "$ENV__USER_PUBLIC_PATH" ]; then
          echo "존재하지 않는 사용자 아이디: **$USER_ID**" > comment.md
          gh issue comment "$ISSUE_NUMBER" -F comment.md
          exit 1
        fi
        
    - name: Check GitHub user ownership
      env:
        ENV__USER_PUBLIC_META_INFO_FILE: ${{ steps.extract.outputs.user_public_meta_info_file }}
        GITHUB_ID: ${{ github.event.issue.user.id }}
        ISSUE_NUMBER: ${{ github.event.issue.number }}
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Validation: User ownership
        GITHUB_ID_META_FILE=$(jq -r '.github_id // empty' "$ENV__USER_PUBLIC_META_INFO_FILE")
        if [ "$GITHUB_ID" != "$GITHUB_ID_META_FILE" ]; then
          echo "권한이 없습니다" > comment.md
          gh issue comment "$ISSUE_NUMBER" -F comment.md
          exit 1
        fi
        
    - name: Convert article body markdown to html
      id: convert
      env:
        PARSED_ISSUE: ${{ steps.issue-parser.outputs.parsed-issue }}
        ORIGINAL_URL: ${{ steps.extract.outputs.original_url }}
      run: |
        # Extract
        ARTICLE_MARKDOWN=$(echo "$PARSED_ISSUE" | jq -r '.["article"]')
        echo "Extracted ARTICLE_MARKDOWN: $ARTICLE_MARKDOWN"
        
        # Optional
        if [ -z "$ARTICLE_MARKDOWN" ]; then
          ARTICLE_MARKDOWN="[$ORIGINAL_URL]($ORIGINAL_URL)"
        fi
        
        # Convert
        sudo apt-get install -y pandoc
        
        ARTICLE_HTML=$(echo "$ARTICLE_MARKDOWN" | pandoc -f gfm -t html | jq -Rs . | jq -r)
        echo "ARTICLE_HTML: $ARTICLE_HTML"
        
        # SEO
        ARTICLE_TXT=$(echo "$ARTICLE_HTML" | pandoc -f html -t plain)
        if [ -z "$ARTICLE_TXT" ]; then
          PAGE_DESC="${ORIGINAL_URL} URL로 이동하는 단축 URL 페이지"
        else
          PAGE_DESC=$(echo "$ARTICLE_TXT" | sed ':a;N;$!ba;s/\n/ /g' | sed 's/[[:space:]]\+/ /g' | grep -o . | head -n 100 | paste -sd '')
        fi
        
        # Output
        echo "ARTICLE_TXT: $ARTICLE_TXT"
        echo "PAGE_DESC: $PAGE_DESC"
        
        # Github output
        {
          echo "article_html<<EOF"
          echo "$ARTICLE_HTML"
          echo "EOF"
          
          echo "page_desc=$PAGE_DESC"
        } >> "$GITHUB_OUTPUT"
        
    - name: Make breadcrumbs
      id: breadcrumbs
      env:
        BREADCRUMBS_STR: ${{ steps.extract.outputs.breadcrumbs_str }}
      run: |
        # Breadcrumbs
        IFS=',' read -ra BREADCRUMBS_ARR <<< "$BREADCRUMBS_STR"
        for ITEM in "${BREADCRUMBS_ARR[@]}"; do
          TEXT="${ITEM%%|*}"
          LINK="${ITEM##*|}"
          
          BREADCRUMB_ITEMS+="
            <li class=\"breadcrumb-item lh-1\"><i class=\"ki-duotone ki-right fs-4 text-gray-700 mx-n1\"></i></li>
            <li class=\"breadcrumb-item text-gray-700 lh-1\"><a href=\"$LINK\" class=\"text-gray-700 text-hover-primary\"><span>$TEXT</span></a></li>
          "
        done
        
        # Output
        echo "BREADCRUMB_ITEMS: $BREADCRUMB_ITEMS"
        
        # Github output
        {
          echo "breadcrumb_items<<EOF"
          echo "$BREADCRUMB_ITEMS"
          echo "EOF"
        } >> "$GITHUB_OUTPUT"
        
    - name: Make dir
      env:
        ENV__USER_PUBLIC_SHORT_URL_HTML_FILE: ${{ steps.extract.outputs.user_public_short_url_html_file }}
      run:
        mkdir -p "$(dirname "$ENV__USER_PUBLIC_SHORT_URL_HTML_FILE")"
        
    - name: Update list meta info
      env:
        ENV__LIST_PUBLIC_GLOBAL_META_INFO_FILE: ${{ steps.extract.outputs.list_public_global_meta_info_file }}
        ENV__LIST_PUBLIC_META_INFO_FILE: ${{ steps.extract.outputs.list_public_meta_info_file }}
        ENV__CONTENT_META_INFO_FILE_NAME: ${{ steps.env.outputs.content_meta_info_file_name }}
        ENV__USER_SHORT_URL_HTML_FILE_NAME: ${{ steps.env.outputs.user_short_url_html_file_name }}
        USER_PUBLIC_PATH: ${{ steps.extract.outputs.user_public_path }}
        SHORT_PATH: ${{ steps.extract.outputs.short_path }}
        CREATED_AT: ${{ steps.env.outputs.created_at }}
      run: |
        python3 << EOF
        import os
        import json
        
        # JSON files
        json_files = [
          os.environ["ENV__LIST_PUBLIC_GLOBAL_META_INFO_FILE"],
          os.environ["ENV__LIST_PUBLIC_META_INFO_FILE"]
        ]
        
        for json_file in json_files:
          # Load JSON file
          json_data = {"list": []}
          if os.path.exists(json_file):
            with open(json_file, "r", encoding="utf-8") as f:
              json_data = json.load(f)
          
          # Delete prev files
          if json_file == os.environ["ENV__LIST_PUBLIC_META_INFO_FILE"]:
            prev_info = [
              item for item in json_data["list"]
              if item.get("path") == os.environ["SHORT_PATH"]
            ]
            
            if prev_info:
              for file_name in prev_info[0]["files"]:
                prev_file = os.path.join(os.environ["USER_PUBLIC_PATH"], os.environ["SHORT_PATH"], file_name)
                print(prev_file)
                if os.path.exists(prev_file):
                  os.remove(prev_file)
          
          # Update JSON data
          info = {
            "type": "user-short-url",
            "path": os.environ["SHORT_PATH"],
            "files": [
              os.environ["ENV__USER_SHORT_URL_HTML_FILE_NAME"],
              os.environ["ENV__CONTENT_META_INFO_FILE_NAME"]
            ],
            "created_at": os.environ["CREATED_AT"]
          }
          
          json_data["list"] = [
              item for item in json_data["list"]
              if item.get("path") != os.environ["SHORT_PATH"]
          ]
          
          json_data["list"].append(info)
          
          # Save to JSON file
          with open(json_file, "w", encoding="utf-8") as f:
              json.dump(json_data, f, ensure_ascii=False, indent=2)
        EOF
        
    - name: Create user short URL page
      env:
        ENV__USER_SHORT_URL_HTML_TEMPLATE_FILE: ${{ steps.env.outputs.user_short_url_html_template_file }}
        ENV__USER_SHORT_URL_HTML_FILE_NAME: ${{ steps.env.outputs.user_short_url_html_file_name }}
        ENV__USER_PUBLIC_SHORT_URL_HTML_FILE: ${{ steps.extract.outputs.user_public_short_url_html_file }}
        ENV__USER_SERVICE_MENU_INFO_FILE: ${{ steps.extract.outputs.user_service_menu_info_file }}
        ENV__CONTENT_PUBLIC_META_INFO_FILE: ${{ steps.extract.outputs.content_public_meta_info_file }}
        ENV__CONTENT_META_INFO_FILE_NAME: ${{ steps.env.outputs.content_meta_info_file_name }}
        USER_ID: ${{ steps.extract.outputs.user_id }}
        ORIGINAL_URL: ${{ steps.extract.outputs.original_url }}
        SHORT_PATH: ${{ steps.extract.outputs.short_path }}
        REDIRECT_DELAY: ${{ steps.extract.outputs.redirect_delay }}
        PAGE_TITLE: ${{ steps.extract.outputs.page_title }}
        ARTICLE_TITLE: ${{ steps.extract.outputs.article_title }}
        ARTICLE_HTML: ${{ steps.convert.outputs.article_html }}
        BREADCRUMB_ITEMS: ${{ steps.breadcrumbs.outputs.breadcrumb_items }}
        CANONICAL_PATH: ${{ steps.extract.outputs.canonical_path }}
        PAGE_DESC: ${{ steps.extract.outputs.page_desc }}
        CREATED_AT: ${{ steps.env.outputs.created_at }}
      run: |
        # Template
        envsubst < "$ENV__USER_SHORT_URL_HTML_TEMPLATE_FILE" > "$ENV__USER_PUBLIC_SHORT_URL_HTML_FILE"
        
        # Content meta info
        cat <<EOF > "$ENV__CONTENT_PUBLIC_META_INFO_FILE"
        {
          "type": "user-short-url",
          "path": "$SHORT_PATH",
          "files": [
            "$ENV__USER_SHORT_URL_HTML_FILE_NAME",
            "$ENV__CONTENT_META_INFO_FILE_NAME"
          ],
          "created_at": "$CREATED_AT"
        }
        EOF
        
    - name: Setup Git
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
          
    - name: Commit and push to main
      env:
        USER_PUBLIC_PATH: ${{ steps.extract.outputs.user_public_path }}
        USER_ID: ${{ steps.extract.outputs.user_id }}
      run: |
        git checkout main
        git pull origin main
        git add "$USER_PUBLIC_PATH" || true
        git commit -m "Add user short URL page for $USER_ID" || echo "Nothing to commit"
        git push origin main
        
    - name: Comment on issue
      env:
        ENV__USER_SERVICE_SHORT_URL_PATH: ${{ steps.extract.outputs.user_service_short_url_path }}
        USER_ID: ${{ steps.extract.outputs.user_id }}
        SHORT_PATH: ${{ steps.extract.outputs.short_path }}
        REPO_NAME: ${{ github.event.repository.name }}
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        echo "사용자 **$USER_ID**의 단축 URL **$SHORT_PATH** 등록 완료: [$REPO_NAME/$ENV__USER_SERVICE_SHORT_URL_PATH](https://$REPO_NAME/$ENV__USER_SERVICE_SHORT_URL_PATH)" > comment.md
        gh issue comment ${{ github.event.issue.number }} -F comment.md
