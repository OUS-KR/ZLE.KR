name: User menu setting by issue
  
on:
  issues:
    types: [opened, edited]
    
jobs:
  user-menu-setting:
    if: contains(github.event.issue.labels.*.name, 'user-menu-setting')
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout main branch
      uses: actions/checkout@v3
      with:
        ref: main
        
    - name: Set env
      id: env
      env:
        GITHUB_ID: ${{ github.event.issue.user.id }}
      run: |
        # Env
        USERS_REGISTER_INFO_PATH="registered/users"
        USERS_PUBLIC_PATH="public/u"
        
        USER_REGISTER_INFO_FILE="$USERS_REGISTER_INFO_PATH/${GITHUB_ID}.json"
        USER_META_INFO_FILE_NAME="user.json"
        USER_MENU_INFO_FILE_NAME="menu.json"
        USER_MENU_HTML_FILE_NAME="menu.html"
        
        # Github output
        {
          echo "users_register_info_path=$USERS_REGISTER_INFO_PATH"
          echo "users_public_path=$USERS_PUBLIC_PATH"
        
          echo "user_register_info_file=$USER_REGISTER_INFO_FILE"
          echo "user_meta_info_file_name=$USER_META_INFO_FILE_NAME"
          echo "user_menu_info_file_name=$USER_MENU_INFO_FILE_NAME"
          echo "user_menu_html_file_name=$USER_MENU_HTML_FILE_NAME"
        } >> "$GITHUB_OUTPUT"
        
    - name: Parse issue forms
      id: issue-parser
      uses: edumserrano/github-issue-forms-parser@v1.3.7
      with:
        template-filepath: '.github/ISSUE_TEMPLATE/04-user-menu-setting-by-issue.yml'
        issue-form-body: '${{ github.event.issue.body }}'
        
    - name: Extract the first user ID from registered user info
      uses: ./.github/actions/extract-the-first-user-id-from-registered-user-info
      id: registered-user-info
      with:
        user-register-info-file: ${{ steps.env.outputs.user_register_info_file }}
        
    - name: Extract user ID and menu setting from parsed issue
      id: extract
      env:
        ENV__USERS_PUBLIC_PATH: ${{ steps.env.outputs.users_public_path }}
        ENV__USER_META_INFO_FILE_NAME: ${{ steps.env.outputs.user_meta_info_file_name }}
        ENV__USER_MENU_INFO_FILE_NAME: ${{ steps.env.outputs.user_menu_info_file_name }}
        ENV__USER_MENU_HTML_FILE_NAME: ${{ steps.env.outputs.user_menu_html_file_name }}
        PARSED_ISSUE: ${{ steps.issue-parser.outputs.parsed-issue }}
        FIRST_USER_ID_IN_REGISTERED_USER_INFO: ${{ steps.registered-user-info.outputs.first-user-id-in-registered-user-info }}
        ISSUE_NUMBER: ${{ github.event.issue.number }}
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Extract
        USER_ID=$(echo "$PARSED_ISSUE" | jq -r '.["user-id"]')
        
        # Optionals
        if [ -z "$USER_ID" ]; then
          USER_ID="$FIRST_USER_ID_IN_REGISTERED_USER_INFO"
        fi
        
        # User paths & files
        USER_PUBLIC_PATH="$ENV__USERS_PUBLIC_PATH/$USER_ID"
        USER_PUBLIC_META_INFO_FILE="$USER_PUBLIC_PATH/$ENV__USER_META_INFO_FILE_NAME"
        USER_PUBLIC_MENU_INFO_FILE="$USER_PUBLIC_PATH/$ENV__USER_MENU_INFO_FILE_NAME"
        USER_PUBLIC_MENU_HTML_FILE="$USER_PUBLIC_PATH/$ENV__USER_MENU_HTML_FILE_NAME"
        
        # Validation: User ID
        if [[ ! "$USER_ID" =~ ^[a-z0-9][a-z0-9_-]{1,28}[a-z0-9]$ ]]; then
          echo "올바르지 않은 아이디 형식" > comment.md
          gh issue comment "$ISSUE_NUMBER" -F comment.md
          echo "user_id=" >> $GITHUB_OUTPUT
          exit 1
        fi
        
        # Github output
        {
          echo "user_id=$USER_ID"
          
          echo "user_public_path=$USER_PUBLIC_PATH"
          echo "user_public_meta_info_file=$USER_PUBLIC_META_INFO_FILE"
          echo "user_public_menu_info_file=$USER_PUBLIC_MENU_INFO_FILE"
          echo "user_public_menu_html_file=$USER_PUBLIC_MENU_HTML_FILE"
        } >> $GITHUB_OUTPUT
        
    - name: Check if user exists
      env:
        ENV__USER_PUBLIC_PATH: ${{ steps.extract.outputs.user_public_path }}
        USER_ID: ${{ steps.extract.outputs.user_id }}
        ISSUE_NUMBER: ${{ github.event.issue.number }}
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Validation: User ID
        if [ ! -d "$ENV__USER_PUBLIC_PATH" ]; then
          echo "존재하지 않는 사용자 아이디: **$USER_ID**" > comment.md
          gh issue comment "$ISSUE_NUMBER" -F comment.md
          exit 1
        fi
        
    - name: Check GitHub user ownership
      env:
        ENV__USER_PUBLIC_META_INFO_FILE: ${{ steps.extract.outputs.user_public_meta_info_file }}
        GITHUB_ID: ${{ github.event.issue.user.id }}
        ISSUE_NUMBER: ${{ github.event.issue.number }}
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Validation: User ownership
        GITHUB_ID_META_FILE=$(jq -r '.github_id // empty' "$ENV__USER_PUBLIC_META_INFO_FILE")
        if [ "$GITHUB_ID" != "$GITHUB_ID_META_FILE" ]; then
          echo "권한이 없습니다" > comment.md
          gh issue comment "$ISSUE_NUMBER" -F comment.md
          exit 1
        fi
        
    - name: Convert menu markdown to html
      id: convert
      env:
        PARSED_ISSUE: ${{ steps.issue-parser.outputs.parsed-issue }}
      run: |
        # Extract
        MENU_MARKDOWN=$(echo "$PARSED_ISSUE" | jq -r '.["menu"]')
        echo "Extracted MENU_MARKDOWN: $MENU_MARKDOWN"
        
        # Convert
        sudo apt-get install -y pandoc
        
        MENU_HTML=$(echo "$MENU_MARKDOWN" | pandoc -f gfm -t html | jq -Rs . | jq -r)
        echo "MENU_HTML: $MENU_HTML"
        
        # Github output
        {
          echo "menu_html<<EOF"
          echo "$MENU_HTML"
          echo "EOF"
        } >> "$GITHUB_OUTPUT"
        
    - name: Make user menu json file
      env:
        ENV__USER_PUBLIC_MENU_INFO_FILE: ${{ steps.extract.outputs.user_public_menu_info_file }}
        ENV__USER_PUBLIC_MENU_HTML_FILE: ${{ steps.extract.outputs.user_public_menu_html_file }}
        MENU_HTML: ${{ steps.convert.outputs.menu_html }}
        USER_ID: ${{ steps.extract.outputs.user_id }}
        GITHUB_ID: ${{ github.event.issue.user.id }}
        GITHUB_NAME: ${{ github.event.issue.user.login }}
      run: |
        # Save to HTML file
        echo "$MENU_HTML" > "$ENV__USER_PUBLIC_MENU_HTML_FILE"
        
        # Convert
        pip install beautifulsoup4
        
        python3 << EOF
        import os
        import json
        from bs4 import BeautifulSoup
        
        # Load HTML file
        with open(os.environ["ENV__USER_PUBLIC_MENU_HTML_FILE"], "r", encoding="utf-8") as f:
            soup = BeautifulSoup(f, "html.parser")
          
        def parse_menu(ul):
            result = []
            for li in ul.find_all("li", recursive=False):
                item = {}
                a_tag = li.find("a", recursive=False)
              
                if a_tag:
                    item["text"] = a_tag.text.strip()
                    item["link"] = a_tag.get("href", "").strip()
                else:
                    item["text"] = li.contents[0].strip() if li.contents else li.get_text(strip=True)
                  
                # Check for children
                sub_ul = li.find("ul", recursive=False)
                if sub_ul:
                    item["subs"] = parse_menu(sub_ul)
                  
                result.append(item)
            return result
                  
        top_ul = soup.find("ul")
        menu_json = parse_menu(top_ul) if top_ul else []
                  
        # Save to JSON file
        with open(os.environ["ENV__USER_PUBLIC_MENU_INFO_FILE"], "w", encoding="utf-8") as f:
            json.dump(menu_json, f, ensure_ascii=False, indent=2)
        EOF
        
        # Remove HTML file
        rm "$ENV__USER_PUBLIC_MENU_HTML_FILE"
        
    - name: Setup Git
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        
    - name: Commit and push to main
      env:
        ENV__USER_PUBLIC_MENU_INFO_FILE: ${{ steps.extract.outputs.user_public_menu_info_file }}
        USER_ID: ${{ steps.extract.outputs.user_id }}
      run: |
        git checkout main
        git pull origin main
        git add "$ENV__USER_PUBLIC_MENU_INFO_FILE" || true
        git commit -m "Update user menu for $USER_ID" || echo "Nothing to commit"
        git push origin main
        
    - name: Comment on issue
      env:
        USER_ID: ${{ steps.extract.outputs.user_id }}
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        echo "사용자 **$USER_ID** 메뉴 설정 완료" > comment.md
        gh issue comment ${{ github.event.issue.number }} -F comment.md
