name: User short URL deletion by issue
  
on:
  issues:
    types: [opened, edited]
    
jobs:
  user-short-url-deletion:
    if: contains(github.event.issue.labels.*.name, 'user-short-url-deletion')
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout main branch
      uses: actions/checkout@v3
      with:
        ref: main
        
    - name: Set env
      env:
          GITHUB_ID: ${{ github.event.issue.user.id }}
      id: env
      run: |
        # Env
        USERS_REGISTER_INFO_PATH="registered/users"
        USERS_PUBLIC_PATH="public/u"
        USERS_SERVICE_PATH="u"
        
        USER_REGISTER_INFO_FILE="$USERS_REGISTER_INFO_PATH/${GITHUB_ID}.json"
        USER_SHORT_URL_HTML_FILE_NAME="index.html"
        USER_META_INFO_FILE_NAME="user.json"
        CONTENT_META_INFO_FILE_NAME="content.json"
        LIST_GLOBAL_META_INFO_FILE_NAME="list.global.json"
        LIST_META_INFO_FILE_NAME="list.json"
        
        # Github output
        {
          # Env
          echo "users_register_info_path=$USERS_REGISTER_INFO_PATH"
          echo "users_public_path=$USERS_PUBLIC_PATH"
          echo "users_service_path=$USERS_SERVICE_PATH"
        
          echo "user_register_info_file=$USER_REGISTER_INFO_FILE"
          echo "user_short_url_html_file_name=$USER_SHORT_URL_HTML_FILE_NAME"
          echo "user_meta_info_file_name=$USER_META_INFO_FILE_NAME"
          echo "content_meta_info_file_name=$CONTENT_META_INFO_FILE_NAME"
          echo "list_global_meta_info_file_name=$LIST_GLOBAL_META_INFO_FILE_NAME"
          echo "list_meta_info_file_name=$LIST_META_INFO_FILE_NAME"
        } >> "$GITHUB_OUTPUT"
        
    - name: Parse issue forms
      id: issue-parser
      uses: edumserrano/github-issue-forms-parser@v1.3.7
      with:
        template-filepath: '.github/ISSUE_TEMPLATE/52-user-short-url-deletion-by-issue.yml'
        issue-form-body: '${{ github.event.issue.body }}'
        
    - name: Extract the first user ID from registered user info
      uses: ./.github/actions/extract-the-first-user-id-from-registered-user-info
      id: registered-user-info
      with:
        user-register-info-file: ${{ steps.env.outputs.user_register_info_file }}
        
    - name: Extract user ID and short URL from issue body
      env:
        ENV__USERS_PUBLIC_PATH: ${{ steps.env.outputs.users_public_path }}
        ENV__USERS_SERVICE_PATH: ${{ steps.env.outputs.users_service_path }}
        ENV__USER_SHORT_URL_HTML_FILE_NAME: ${{ steps.env.outputs.user_short_url_html_file_name }}
        ENV__USER_META_INFO_FILE_NAME: ${{ steps.env.outputs.user_meta_info_file_name }}
        ENV__CONTENT_META_INFO_FILE_NAME: ${{ steps.env.outputs.content_meta_info_file_name }}
        ENV__LIST_GLOBAL_META_INFO_FILE_NAME: ${{ steps.env.outputs.list_global_meta_info_file_name }}
        ENV__LIST_META_INFO_FILE_NAME: ${{ steps.env.outputs.list_meta_info_file_name }}
        PARSED_ISSUE: ${{ steps.issue-parser.outputs.parsed-issue }}
        FIRST_USER_ID_IN_REGISTERED_USER_INFO: ${{ steps.registered-user-info.outputs.first-user-id-in-registered-user-inf }}
        ISSUE_NUMBER: ${{ github.event.issue.number }}
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      id: extract
      run: |
        # Extract
        USER_ID=$(echo "$PARSED_ISSUE" | jq -r '.["user-id"]')
        SHORT_PATH=$(echo "$PARSED_ISSUE" | jq -r '.["short-url"]')
        
        # Optionals
        if [ -z "$USER_ID" ]; then
          USER_ID="$FIRST_USER_ID_IN_REGISTERED_USER_INFO"
        fi
        
        # User paths & files
        USER_PUBLIC_PATH="$ENV__USERS_PUBLIC_PATH/$USER_ID"
        USER_PUBLIC_SHORT_URL_PATH="$USER_PUBLIC_PATH/$SHORT_PATH"
        USER_SERVICE_PATH="$ENV__USERS_SERVICE_PATH/$USER_ID"
        USER_SERVICE_SHORT_URL_PATH="$USER_SERVICE_PATH/$SHORT_PATH"
        
        USER_PUBLIC_META_INFO_FILE="$USER_PUBLIC_PATH/$ENV__USER_META_INFO_FILE_NAME"
        CONTENT_PUBLIC_META_INFO_FILE="$USER_PUBLIC_SHORT_URL_PATH/$ENV__CONTENT_META_INFO_FILE_NAME"
        LIST_PUBLIC_GLOBAL_META_INFO_FILE="$USER_PUBLIC_PATH/$ENV__LIST_GLOBAL_META_INFO_FILE_NAME"
        LIST_PUBLIC_META_INFO_FILE="$USER_PUBLIC_SHORT_URL_PATH/../$ENV__LIST_META_INFO_FILE_NAME"
        USER_PUBLIC_SHORT_URL_HTML_FILE="$USER_PUBLIC_SHORT_URL_PATH/$ENV__USER_SHORT_URL_HTML_FILE_NAME"
        
        # Validation: User ID
        if [[ ! "$USER_ID" =~ ^[a-z0-9][a-z0-9_-]{1,28}[a-z0-9]$ ]]; then
          echo "올바르지 않은 아이디 형식" > comment.md
          gh issue comment "$ISSUE_NUMBER" -F comment.md
          echo "user_id=" >> $GITHUB_OUTPUT
          exit 1
        fi
        
        # Validation: Short URL path
        validate_segment() {
          SEGMENT="$1"
          echo "SEGMENT: $SEGMENT"
          
          if [[ "$SEGMENT" =~ ^[a-zA-Z0-9](?:[a-zA-Z0-9_-]{0,18}[a-zA-Z0-9])?$ ]]; then
            return 1
          fi
          return 0
        }
        
        IFS='/' read -ra PARTS <<< "$SHORT_PATH"
        for SEGMENT in "${PARTS[@]}"; do
          if ! validate_segment "$SEGMENT"; then
            echo "올바르지 않은 단축 URL 경로 형식: $SEGMENT" > comment.md
            gh issue comment "$ISSUE_NUMBER" -F comment.md
            echo "short_path=" >> $GITHUB_OUTPUT
            exit 1
          fi
        done
        
        # Github output
        {
          echo "user_id=$USER_ID"
          echo "short_path=$SHORT_PATH"
          
          echo "user_public_path=$USER_PUBLIC_PATH"
          echo "user_public_short_url_path=$USER_PUBLIC_SHORT_URL_PATH"
          echo "user_service_path=$USER_SERVICE_PATH"
          echo "user_service_short_url_path=$USER_SERVICE_SHORT_URL_PATH"
          
          echo "user_public_meta_info_file=$USER_PUBLIC_META_INFO_FILE"
          echo "content_public_meta_info_file=$CONTENT_PUBLIC_META_INFO_FILE"
          echo "list_public_global_meta_info_file=$LIST_PUBLIC_GLOBAL_META_INFO_FILE"
          echo "list_public_meta_info_file=$LIST_PUBLIC_META_INFO_FILE"
          echo "user_public_short_url_html_file=$USER_PUBLIC_SHORT_URL_HTML_FILE"
        } >> $GITHUB_OUTPUT
        
    - name: Check if user exists
      uses: ./.github/actions/check-if-user-exists
      with:
        user-public-path: ${{ steps.extract.outputs.user_public_path }}
        user-id: ${{ steps.extract.outputs.user_id }}
        issue-number: ${{ github.event.issue.number }}
        gh-token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Check GitHub user ownership
      uses: ./.github/actions/check-github-user-ownership
      env:
        user-public-meta-info-file: ${{ steps.extract.outputs.user_public_meta_info_file }}
        github-id: ${{ github.event.issue.user.id }}
        issue-number: ${{ github.event.issue.number }}
        gh-token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Update list meta info
      env:
        ENV__LIST_PUBLIC_GLOBAL_META_INFO_FILE: ${{ steps.extract.outputs.list_public_global_meta_info_file }}
        ENV__LIST_PUBLIC_META_INFO_FILE: ${{ steps.extract.outputs.list_public_meta_info_file }}
        USER_PUBLIC_PATH: ${{ steps.extract.outputs.user_public_path }}
        SHORT_PATH: ${{ steps.extract.outputs.short_path }}
      run: |
        python3 << EOF
        import os
        import json
        
        # JSON files
        json_files = [
          os.environ["ENV__LIST_PUBLIC_GLOBAL_META_INFO_FILE"],
          os.environ["ENV__LIST_PUBLIC_META_INFO_FILE"]
        ]
        
        for json_file in json_files:
          # Load JSON file
          json_data = {"list": []}
          if os.path.exists(json_file):
            with open(json_file, "r", encoding="utf-8") as f:
              json_data = json.load(f)
              
          # Delete files
          if json_file == os.environ["ENV__LIST_PUBLIC_META_INFO_FILE"]:
            prev_info = [
              item for item in json_data["list"]
              if item.get("path") == os.environ["SHORT_PATH"]
            ]
            
            if prev_info:
              for file_name in prev_info[0]["files"]:
                prev_file = os.path.join(os.environ["USER_PUBLIC_PATH"], os.environ["SHORT_PATH"], file_name)
                print(prev_file)
                if os.path.exists(prev_file):
                  os.remove(prev_file)
              
          # Update JSON data
          json_data["list"] = [
              item for item in json_data["list"]
              if item.get("path") != os.environ["SHORT_PATH"]
          ]
          
          if json_file == os.environ["ENV__LIST_PUBLIC_META_INFO_FILE"] and not json_data["list"]:
            # Delete list meta info file
            os.remove(json_file)
          else:
            # Save to JSON file
            with open(json_file, "w", encoding="utf-8") as f:
                json.dump(json_data, f, ensure_ascii=False, indent=2)
        EOF
        
    - name: Setup Git
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
          
    - name: Commit and push to main
      env:
        USER_PUBLIC_PATH: ${{ steps.extract.outputs.user_public_path }}
        USER_ID: ${{ steps.extract.outputs.user_id }}
      run: |
        git checkout main
        git pull origin main
        git add "$USER_PUBLIC_PATH" || true
        git commit -m "Delete user short URL page for $USER_ID" || echo "Nothing to commit"
        git push origin main
        
    - name: Comment on issue
      env:
        ENV__USER_SERVICE_SHORT_URL_PATH: ${{ steps.extract.outputs.user_service_short_url_path }}
        USER_ID: ${{ steps.extract.outputs.user_id }}
        SHORT_PATH: ${{ steps.extract.outputs.short_path }}
        REPO_NAME: ${{ github.event.repository.name }}
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        echo "사용자 **$USER_ID**의 등록된 단축 URL **$SHORT_PATH** 삭제 완료: [$REPO_NAME/$ENV__USER_SERVICE_SHORT_URL_PATH](https://$REPO_NAME/$ENV__USER_SERVICE_SHORT_URL_PATH)" > comment.md
        gh issue comment ${{ github.event.issue.number }} -F comment.md
